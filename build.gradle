/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.1/userguide/java_library_plugin.html
 */

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java-library'

// Apply the jacoco plugin to add support for Java Code Coverage
apply plugin: 'jacoco'

// Apply the IntelliJ IDEA and Eclipse IDE supports as "Gradle Projects"
apply plugin: 'idea'
apply plugin: 'eclipse'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    //api 'org.apache.commons:commons-math3:3.6.1'
    api 'org.apache.commons:commons-lang3:3.5'

    //compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.9.1'
    //compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.9.1'

    compile 'org.slf4j:jcl-over-slf4j:1.7.12'

    //3. Logback
    compile 'ch.qos.logback:logback-classic:1.1.3'

    compile 'org.projectlombok:lombok:1.16.18'

    // for JSON Data
      // compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1'

    compile group: 'com.google.guava', name: 'guava', version: '14.0-rc2'
    compile group: 'org.json', name: 'json', version: '20160810'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.0'




    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:22.0'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    //Add Hamcrest matcher framework
    testImplementation 'org.hamcrest:hamcrest-library:1.3'

    // Add mocking facility - useful if you want to force a
}

compileJava {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

compileTestJava {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

eclipse {
    classpath {
        containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
        containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

jacocoTestReport {
    println 'JacocoTestReport STARTED Code Coverage Report!'
    reports {
        xml.enabled false
        csv.enabled false
        html.setDestination(file("${buildDir}/reports/jacocoHtml"))
    }
}

/*test{
    systemProperty("logback.configurationFile", "logback-test.xml")
    testLogging.showStandardStreams = true
    useJUnit{
        excludeCategories ''
    }
}*/
task allTests(type: Test){

}
check.dependsOn(jacocoTestReport)

